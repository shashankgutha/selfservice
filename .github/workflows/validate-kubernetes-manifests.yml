name: Validate Kubernetes Manifests

on:
  workflow_run:
    workflows: ["Update Elastic Agent Config"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      affected-locations: ${{ steps.detect.outputs.affected-locations }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Get PR number
        id: pr
        run: |
          pr_number=$(gh pr list --head ${{ github.event.workflow_run.head_branch }} --json number --jq '.[0].number')
          echo "number=$pr_number" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect affected locations
        id: detect
        run: |
          echo "=== Detecting affected locations from workflow run ==="
          
          # Get changed files from the PR
          pr_number="${{ steps.pr.outputs.number }}"
          if [ -n "$pr_number" ]; then
            changed_files=$(gh pr diff $pr_number --name-only)
            echo "Changed files in PR:"
            echo "$changed_files"
            
            # Check which locations are affected
            affected_locations=""
            
            if echo "$changed_files" | grep -q "^inputs/loc1/"; then
              affected_locations="loc1"
              echo "‚úì loc1 affected"
            fi
            
            if echo "$changed_files" | grep -q "^inputs/loc2/"; then
              if [ -n "$affected_locations" ]; then
                affected_locations="$affected_locations,loc2"
              else
                affected_locations="loc2"
              fi
              echo "‚úì loc2 affected"
            fi
            
            if [ -n "$affected_locations" ]; then
              echo "has-changes=true" >> $GITHUB_OUTPUT
              echo "affected-locations=$affected_locations" >> $GITHUB_OUTPUT
              echo "Affected locations: $affected_locations"
            else
              echo "has-changes=false" >> $GITHUB_OUTPUT
              echo "affected-locations=" >> $GITHUB_OUTPUT
              echo "No affected locations detected"
            fi
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "affected-locations=" >> $GITHUB_OUTPUT
            echo "Could not determine PR number"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-loc1:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true' && contains(needs.detect-changes.outputs.affected-locations, 'loc1')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate all loc1 manifests
        run: |
          echo "=== Validating all Kubernetes manifests for loc1 ==="
          
          # Validate agent-deployment.yml
          if [ -f "inputs/loc1/agent-deployment.yml" ]; then
            echo "‚úì Validating agent-deployment.yml..."
            kubectl apply --dry-run=client -f inputs/loc1/agent-deployment.yml
          else
            echo "‚ö†Ô∏è agent-deployment.yml not found"
          fi
          
          # Validate elastic-agent.yml
          if [ -f "inputs/loc1/elastic-agent.yml" ]; then
            echo "‚úì Validating elastic-agent.yml YAML syntax..."
            python -c "import yaml; yaml.safe_load(open('inputs/loc1/elastic-agent.yml'))"
          else
            echo "‚ö†Ô∏è elastic-agent.yml not found"
          fi
          
          # Validate kustomization.yml
          if [ -f "inputs/loc1/kustomization.yml" ]; then
            echo "‚úì Validating kustomization.yml YAML syntax..."
            python -c "import yaml; yaml.safe_load(open('inputs/loc1/kustomization.yml'))"
          else
            echo "‚ö†Ô∏è kustomization.yml not found"
          fi

      - name: Validate kustomization with kubectl apply -k
        run: |
          echo "=== Validating kustomization for loc1 with kubectl apply -k ==="
          
          if [ -f "inputs/loc1/kustomization.yml" ]; then
            cd inputs/loc1
            
            echo "‚úì Validating with kubectl apply -k (dry-run)..."
            kubectl apply -k . --dry-run=client
            
            echo "‚úì Validation successful!"
          else
            echo "‚ö†Ô∏è kustomization.yml not found, skipping kustomize validation"
          fi

  validate-loc2:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true' && contains(needs.detect-changes.outputs.affected-locations, 'loc2')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate all loc2 manifests
        run: |
          echo "=== Validating all Kubernetes manifests for loc2 ==="
          
          # Validate agent-deployment.yml
          if [ -f "inputs/loc2/agent-deployment.yml" ]; then
            echo "‚úì Validating agent-deployment.yml..."
            kubectl apply --dry-run=client -f inputs/loc2/agent-deployment.yml
          else
            echo "‚ö†Ô∏è agent-deployment.yml not found"
          fi
          
          # Validate elastic-agent.yml
          if [ -f "inputs/loc2/elastic-agent.yml" ]; then
            echo "‚úì Validating elastic-agent.yml YAML syntax..."
            python -c "import yaml; yaml.safe_load(open('inputs/loc2/elastic-agent.yml'))"
          else
            echo "‚ö†Ô∏è elastic-agent.yml not found"
          fi
          
          # Validate kustomization.yml
          if [ -f "inputs/loc2/kustomization.yml" ]; then
            echo "‚úì Validating kustomization.yml YAML syntax..."
            python -c "import yaml; yaml.safe_load(open('inputs/loc2/kustomization.yml'))"
          else
            echo "‚ö†Ô∏è kustomization.yml not found"
          fi

      - name: Validate kustomization with kubectl apply -k
        run: |
          echo "=== Validating kustomization for loc2 with kubectl apply -k ==="
          
          if [ -f "inputs/loc2/kustomization.yml" ]; then
            cd inputs/loc2
            
            echo "‚úì Validating with kubectl apply -k (dry-run)..."
            kubectl apply -k . --dry-run=client
            
            echo "‚úì Validation successful!"
          else
            echo "‚ö†Ô∏è kustomization.yml not found, skipping kustomize validation"
          fi

  post-validation:
    needs: [detect-changes, validate-loc1, validate-loc2]
    runs-on: ubuntu-latest
    if: always() && needs.detect-changes.outputs.has-changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Get PR number
        id: pr
        run: |
          pr_number=$(gh pr list --head ${{ github.event.workflow_run.head_branch }} --json number --jq '.[0].number')
          echo "number=$pr_number" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post validation results
        uses: actions/github-script@v6
        with:
          script: |
            const loc1Result = '${{ needs.validate-loc1.result }}';
            const loc2Result = '${{ needs.validate-loc2.result }}';
            const affectedLocations = '${{ needs.detect-changes.outputs.affected-locations }}';
            const prNumber = '${{ steps.pr.outputs.number }}';
            
            let comment = `## üîç Kubernetes Manifest Validation Results\n\n`;
            comment += `**Triggered by**: Update Elastic Agent Config workflow completion\n`;
            comment += `**Affected locations**: ${affectedLocations}\n\n`;
            
            // Determine overall status
            let overallSuccess = true;
            let hasValidations = false;
            
            if (affectedLocations.includes('loc1')) {
              hasValidations = true;
              const status = loc1Result === 'success' ? '‚úÖ' : '‚ùå';
              comment += `- **loc1**: ${status} ${loc1Result}\n`;
              if (loc1Result !== 'success') overallSuccess = false;
            }
            
            if (affectedLocations.includes('loc2')) {
              hasValidations = true;
              const status = loc2Result === 'success' ? '‚úÖ' : '‚ùå';
              comment += `- **loc2**: ${status} ${loc2Result}\n`;
              if (loc2Result !== 'success') overallSuccess = false;
            }
            
            if (!hasValidations) {
              comment += `‚è≠Ô∏è No Kubernetes manifest validations ran\n`;
            } else if (overallSuccess) {
              comment += `\n### ‚úÖ All validations passed!\n`;
              comment += `The Kubernetes manifests are valid and ready for deployment.\n`;
            } else {
              comment += `\n### ‚ùå Validation failed\n`;
              comment += `Please check the workflow logs and fix the issues before merging.\n`;
            }
            
            comment += `\n### üìã Validated Components\n`;
            comment += `- **YAML Syntax**: Checked with kubectl dry-run\n`;
            comment += `- **Kustomization**: Validated with kubectl apply -k --dry-run\n`;
            comment += `- **Kubernetes Schema**: Validated against cluster API\n`;
            
            if (hasValidations && overallSuccess) {
              comment += `\n### üöÄ Next Steps\n`;
              comment += `- Merge this PR to trigger automatic deployment\n`;
              comment += `- Monitor the deployment workflow for results\n`;
            }
            
            if (prNumber && prNumber !== 'null') {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(prNumber),
                body: comment
              });
            } else {
              console.log('Could not determine PR number, skipping comment');
              console.log('Validation results:', comment);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}